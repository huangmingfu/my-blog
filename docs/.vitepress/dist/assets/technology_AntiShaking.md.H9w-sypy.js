import{_ as s,o as i,c as a,a8 as n}from"./chunks/framework.DBQkAOx6.js";const E=JSON.parse('{"title":"🛡️ 防抖方案（防止用户频繁点击而发送多次重复请求）","description":"","frontmatter":{"sticky":500,"tag":["Technology"]},"headers":[],"relativePath":"technology/AntiShaking.md","filePath":"technology/AntiShaking.md","lastUpdated":1720350421000}'),t={name:"technology/AntiShaking.md"},h=n(`<h1 id="🛡️-防抖方案-防止用户频繁点击而发送多次重复请求" tabindex="-1">🛡️ 防抖方案（防止用户频繁点击而发送多次重复请求） <a class="header-anchor" href="#🛡️-防抖方案-防止用户频繁点击而发送多次重复请求" aria-label="Permalink to &quot;🛡️ 防抖方案（防止用户频繁点击而发送多次重复请求）&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>以下代码以React+Ts为例</p></div><h2 id="_1-利用原生settimeout方法实现防抖" tabindex="-1">1.利用原生setTimeout方法实现防抖： <a class="header-anchor" href="#_1-利用原生settimeout方法实现防抖" aria-label="Permalink to &quot;1.利用原生setTimeout方法实现防抖：&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> useRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NodeJS.Timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> null&gt;(null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handleClick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timer.current &amp;&amp; clearTimeout(timer.current)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    timer.current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        //...逻辑</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    },500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_2-使用lodash-es的debounce方法实现防抖" tabindex="-1">2.使用lodash-es的debounce方法实现防抖 <a class="header-anchor" href="#_2-使用lodash-es的debounce方法实现防抖" aria-label="Permalink to &quot;2.使用lodash-es的debounce方法实现防抖&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//react使用lodash-es的debounce方法需要用useCallback包裹，不然会有bug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> handleClick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debounce((v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    //...逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, 500), [])</span></span></code></pre></div><h2 id="_3-使用loading加载配合-推荐" tabindex="-1">3.使用loading加载配合（推荐）： <a class="header-anchor" href="#_3-使用loading加载配合-推荐" aria-label="Permalink to &quot;3.使用loading加载配合（推荐）：&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">原因</p><p>上述实现方法其实都存在一个问题，这个问题也是运营和后端反馈给我的bug，我在项目中就是使用了第二种方法， 但是会导致一个问题：<br><code>如果请求还在等待中，用户缓慢的点击比如隔了600ms（越过了防抖设置的时间），还是会再次发重复请求，从而导致业务创建了3次公会</code><br><code>解决如下👇</code></p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//提交后显示全屏loading蒙版效果，且在逻辑里return掉</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [loading, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setLoading]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> refLoading</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">refLoading.current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loading</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//提交请求的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">refLoading.current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLoading(true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxxxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLoading(false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div style="display:none;" data-pagefind-meta="base64:JTdCJTIyc3RpY2t5JTIyJTNBNTAwJTJDJTIydGFnJTIyJTNBJTVCJTIyVGVjaG5vbG9neSUyMiU1RCUyQyUyMmRhdGUlMjIlM0ExNzIwMzUwNDIxMDAwJTdE"></div>`,10),l=[h];function e(k,p,d,r,F,g){return i(),a("div",null,l)}const c=s(t,[["render",e]]);export{E as __pageData,c as default};
